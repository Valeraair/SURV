import threading
import matplotlib
matplotlib.use('TkAgg')  # –í–∞–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ –¥—Ä—É–≥–∏–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏ matplotlib
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import matplotlib.dates as mdates
from datetime import timedelta
import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3
from datetime import datetime
import openpyxl
import pystray
from PIL import Image
import sys

class TimeTracker:
    def __init__(self, root):
        self.root = root
        self.root.title("Work Time Tracker")
        self.dark_mode = False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∏–ª–µ–π
        self.style = ttk.Style()
        self.style.theme_use('clam')

        # –£–±–∏—Ä–∞–µ–º –∂–∏—Ä–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã —É Notebook
        self.style.configure(".", relief="flat")
        self.style.map("TButton", relief=[('active', 'flat'), ('!active', 'flat')])
        self.style.configure("TNotebook", borderwidth=1)
        self.style.configure("TNotebook.Tab", padding=[10, 5])
        self.setup_db()
        self.setup_ui()
        self.setup_tray()
        self.running_task = None
        self.paused = False
        self.paused_task_id = None
        self.total_time = 0
        self.current_graph_type = "bar"
        self.root.after(1000, self.update_time)
        self.update_tasks()
        self.update_total_time()
        self.load_theme()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É

    def setup_db(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        self.conn = sqlite3.connect('timetracker.db')
        self.c = self.conn.cursor()
        self.c.execute('''CREATE TABLE IF NOT EXISTS tasks
                         (id INTEGER PRIMARY KEY,
                          date TEXT,
                          login TEXT,
                          regress TEXT,
                          name TEXT,
                          link TEXT,
                          time INTEGER)''')
        self.conn.commit()

    def setup_stats_tab(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.stats_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        control_frame = ttk.Frame(self.stats_frame)
        control_frame.pack(fill=tk.X, padx=5, pady=5)

        # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        ttk.Button(control_frame, text="–°—Ç–æ–ª–±—á–∞—Ç–∞—è",
                   command=lambda: self.switch_graph("bar")).pack(side=tk.LEFT, padx=5)
        ttk.Button(control_frame, text="–ö—Ä—É–≥–æ–≤–∞—è",
                   command=lambda: self.switch_graph("pie")).pack(side=tk.LEFT, padx=5)

        # –ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å" —Å–ø—Ä–∞–≤–∞
        ttk.Button(control_frame, text="–û–±–Ω–æ–≤–∏—Ç—å",
                   command=self.update_graph).pack(side=tk.RIGHT, padx=5)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        self.graph_frame = ttk.Frame(self.stats_frame)
        self.graph_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        # –ó–∞–≥–ª—É—à–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        ttk.Label(self.graph_frame, text="–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...",
                  font=('Arial', 10), foreground='gray').pack(expand=True)

    def switch_graph(self, graph_type):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞"""
        self.current_graph_type = graph_type
        self.update_graph()

    def setup_tracking_tab(self):
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(main_frame)
        control_frame.grid(row=3, columnspan=2, pady=5)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–µ–º—ã –≤ –Ω–∞—á–∞–ª–æ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.theme_btn = ttk.Button(control_frame, text="üåô" if not self.dark_mode else "‚òÄÔ∏è",
                                  command=self.toggle_theme,
                                  width=3)
        self.theme_btn.pack(side=tk.LEFT, padx=10)

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
        delete_btn = ttk.Button(control_frame, text="–£–¥–∞–ª–∏—Ç—å", command=self.delete_task)
        delete_btn.pack(side=tk.LEFT, padx=10)

        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∑–∞–¥–∞—á"""
        tracking_frame = ttk.Frame(self.notebook)
        self.notebook.add(tracking_frame, text="–¢—Ä–µ–∫–∏–Ω–≥")

        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤–µ—Å—å –æ—Å–Ω–æ–≤–Ω–æ–π UI —Å—é–¥–∞
        main_frame = ttk.Frame(tracking_frame, padding=10)
        main_frame.pack(fill=tk.BOTH, expand=True)
        main_frame.grid_columnconfigure(1, weight=1)

        ttk.Label(main_frame, text="–õ–æ–≥–∏–Ω:").grid(row=0, column=0, sticky=tk.W, padx=(0, 10))
        self.login_entry = ttk.Entry(main_frame)
        self.login_entry.grid(row=0, column=1, padx=10, sticky=tk.EW)
        self.add_placeholder(self.login_entry, "–¢–≤–æ–π –ª–æ–≥–∏–Ω")

    def setup_ui(self):
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True)

        # –í–∫–ª–∞–¥–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏)
        self.setup_tracking_tab()

        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫–∏)
        self.setup_stats_tab()

    def add_placeholder(self, entry, text):
        entry.insert(0, text)
        entry.config(foreground='grey')
        entry.bind('<FocusIn>', lambda e: self.on_entry_focus_in(entry, text))
        entry.bind('<FocusOut>', lambda e: self.on_entry_focus_out(entry, text))

    def on_entry_focus_in(self, entry, placeholder):
        if entry.get() == placeholder:
            entry.delete(0, tk.END)
            entry.config(foreground='black')

    def on_entry_focus_out(self, entry, placeholder):
        if entry.get() == '':
            entry.insert(0, placeholder)
            entry.config(foreground='grey')

    def setup_tray(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∫–æ–Ω–∫–∏ —Ç—Ä–µ—è (–±–µ–∑ –∑–∞–ø—É—Å–∫–∞)"""
        image = Image.new('RGB', (16, 16), 'black')
        self.tray_menu = pystray.Menu(
            pystray.MenuItem('–û—Ç–∫—Ä—ã—Ç—å', self.restore_window),
            pystray.MenuItem('–í—ã—Ö–æ–¥', self.exit_app)
        )
        self.tray_icon = None
        self.tray_thread = None

    def add_task(self):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        login = self.login_entry.get().strip()
        regress = self.regress_entry.get().strip()
        name = self.name_entry.get().strip()
        link = self.link_entry.get().strip()

        if not login or login == "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω":
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω")
            self.login_entry.focus_set()
            return

        if not regress or regress == "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏":
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏")
            self.regress_entry.focus_set()
            return

        if not name or name == "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç-—Ä–∞–Ω–∞":
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç-—Ä–∞–Ω–∞")
            self.name_entry.focus_set()
            return

        if not link or link == "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç-—Ä–∞–Ω":
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç-—Ä–∞–Ω")
            self.link_entry.focus_set()
            return

        data = (
            datetime.now().strftime("%d.%m.%Y"),
            login,
            regress,
            name,
            link,
            0
        )

        try:
            self.c.execute("INSERT INTO tasks (date, login, regress, name, link, time) VALUES (?,?,?,?,?,?)", data)
            new_id = self.c.lastrowid

            if self.extra_time.get():
                self.c.execute("INSERT INTO tasks (date, login, regress, name, link, time) VALUES (?,?,?,?,?,?)",
                               (data[0], data[1], data[2], "[–î–û–ü] " + data[3], data[4], 0))

            self.conn.commit()
            self.update_tasks()
            self.clear_task_fields()
            self.start_task_timer(new_id)
            self.update_graph()

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –ë–î", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É: {str(e)}")

    def start_task_timer(self, task_id):
        """–Ø–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞—á–∏"""
        if self.running_task:
            elapsed = (datetime.now() - self.running_task['start_time']).total_seconds()
            self.update_task_time(self.running_task['id'], int(elapsed))
            self.total_time += int(elapsed)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        self.running_task = {'id': task_id, 'start_time': datetime.now()}
        self.paused = False
        self.pause_btn.config(state=tk.NORMAL)
        self.resume_btn.config(state=tk.DISABLED)
        self.edit_btn.config(state=tk.DISABLED)  # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.update_tasks()
        self.update_total_time()

    def clear_task_fields(self):
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏
        self.regress_entry.delete(0, tk.END)
        self.name_entry.delete(0, tk.END)
        self.link_entry.delete(0, tk.END)
        self.extra_time.set(False)

    def delete_task(self):
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        selected = self.tasks_list.selection()
        if not selected:
            return

        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É?"):
            try:
                task_id = self.tasks_list.item(selected[0])['values'][0]

                # –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                if hasattr(self, 'paused_task_id') and self.paused_task_id == task_id:
                    self.paused_task_id = None
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥—Ä—É–≥—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                    self.c.execute("SELECT id FROM tasks WHERE date=? AND id!=? LIMIT 1",
                                   (datetime.now().strftime("%d.%m.%Y"), task_id))
                    result = self.c.fetchone()
                    if result:
                        self.paused_task_id = result[0]

                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                self.c.execute("SELECT time FROM tasks WHERE id=?", (task_id,))
                task_time = self.c.fetchone()[0]

                # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
                self.c.execute("DELETE FROM tasks WHERE id=?", (task_id,))
                self.conn.commit()

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
                self.total_time -= task_time
                self.update_total_time()

                self.update_tasks()

            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", str(e))

    def update_tasks(self):
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
        for item in self.tasks_list.get_children():
            self.tasks_list.delete(item)

        try:
            self.c.execute("SELECT id, regress, name, time FROM tasks WHERE date=?",
                           (datetime.now().strftime("%d.%m.%Y"),))
            tasks = self.c.fetchall()

            for row in tasks:
                task_id, regress, name, time = row
                if self.running_task and self.running_task['id'] == task_id:
                    status = '‚ñ∂ –ê–∫—Ç–∏–≤–Ω–∞'
                    self.edit_btn['state'] = tk.DISABLED  # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
                else:
                    if self.paused and hasattr(self, 'paused_task_id') and self.paused_task_id == task_id:
                        status = '‚è∏ –í—ã–±—Ä–∞–Ω–∞'
                    else:
                        status = '‚è∏ –û–∂–∏–¥–∞–Ω–∏–µ'

                self.tasks_list.insert('', tk.END, values=(
                    task_id,
                    regress,
                    name,
                    status,
                    self.format_time(time)
                ))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            if not tasks:
                self.paused_task_id = None
                self.resume_btn.config(state=tk.DISABLED)
                self.edit_btn.config(state=tk.DISABLED)
            elif self.paused:
                self.resume_btn.config(state=tk.NORMAL)

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", str(e))

    def on_task_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–∫–µ"""
        selected = self.tasks_list.selection()
        # –ö–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–∏—Ç—å" –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–¥–∞—á–∏
        self.edit_btn['state'] = tk.NORMAL if selected else tk.DISABLED

    def format_time(self, seconds):
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        return f"{seconds // 3600:02}:{(seconds % 3600) // 60:02}:{seconds % 60:02}"

    def update_time(self):
        if self.running_task and not self.paused:
            elapsed = int((datetime.now() - self.running_task['start_time']).total_seconds())
            current_total = self.total_time + elapsed
            self.total_time_label.config(text=f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {self.format_time(current_total)}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
            for item in self.tasks_list.get_children():
                values = self.tasks_list.item(item)['values']
                if values[0] == self.running_task['id']:
                    total_task_time = self.get_task_time(self.running_task['id']) + elapsed
                    self.tasks_list.item(item, values=(
                        values[0],
                        values[1],
                        values[2],
                        '‚ñ∂ –ê–∫—Ç–∏–≤–Ω–∞',
                        self.format_time(total_task_time)
                    ))  # <- –í–æ—Ç –∑–¥–µ—Å—å –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
                    break

        self.root.after(1000, self.update_time)

    def get_task_time(self, task_id):
        #–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î
        self.c.execute("SELECT time FROM tasks WHERE id=?", (task_id,))
        result = self.c.fetchone()
        return result[0] if result else 0

    def pause_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ"""
        if self.running_task:
            elapsed = (datetime.now() - self.running_task['start_time']).total_seconds()
            self.update_task_time(self.running_task['id'], int(elapsed))
            self.total_time += int(elapsed)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
            self.paused_task_id = self.running_task['id']
            self.running_task = None

        self.paused = True
        self.pause_btn.config(state=tk.DISABLED)
        self.resume_btn.config(state=tk.NORMAL)
        self.update_tasks()
        self.update_total_time()

    def resume_all(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤ —Å–ø–∏—Å–∫–µ
        selected = self.tasks_list.selection()
        task_id = None

        if selected:
            task_id = self.tasks_list.item(selected[0])['values'][0]
        elif hasattr(self, 'paused_task_id') and self.paused_task_id:
            task_id = self.paused_task_id

        if not task_id:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        self.c.execute("SELECT 1 FROM tasks WHERE id=?", (task_id,))
        if not self.c.fetchone():
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            self.paused_task_id = None
            self.resume_btn.config(state=tk.DISABLED)
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        self.start_task_timer(task_id)
        self.paused = False
        self.pause_btn.config(state=tk.NORMAL)
        self.resume_btn.config(state=tk.DISABLED)

    def update_total_time(self):
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        self.c.execute("SELECT SUM(time) FROM tasks WHERE date=?",
                       (datetime.now().strftime("%d.%m.%Y"),))
        total = self.c.fetchone()[0] or 0
        self.total_time = total
        self.total_time_label.config(text=f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {self.format_time(total)}")

    def finish_day(self):
        if messagebox.askokcancel("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è", "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É?"):
            self.export_to_xlsx()
            self.clear_day_data()
            self.update_graph()  # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ—á–∏—â–µ–Ω—ã")

    def export_to_xlsx(self):
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
        today = datetime.now().strftime("%d.%m.%Y")
        self.c.execute("SELECT date, login, regress, name, link, time FROM tasks WHERE date=?", (today,))
        data = self.c.fetchall()

        wb = openpyxl.Workbook()
        ws = wb.active
        headers = ['–î–∞—Ç–∞', '–õ–æ–≥–∏–Ω', '–í—Ä–µ–º—è', '–†–µ–≥—Ä–µ—Å—Å', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–Ω–∞', '–°—Å—ã–ª–∫–∞']
        ws.append(headers)

        for row in data:
            date, login, regress, name, link, time = row
            ws.append([
                date,
                login,
                self.format_time(time),
                regress,
                "",  # –ü—É—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                name,
                link
            ])

        filename = f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        wb.save(filename)

    def clear_day_data(self):
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å –ø–æ—Å–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
        self.c.execute("DELETE FROM tasks WHERE date=?", (datetime.now().strftime("%d.%m.%Y"),))
        self.conn.commit()
        self.total_time = 0
        self.update_tasks()
        self.update_total_time()

    def run_tray_icon(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∫–æ–Ω–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.tray_icon.run()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ç—Ä–µ–µ: {e}")
        finally:
            self.tray_running = False

    def hide_to_tray(self):
        """–°–∫—Ä—ã—Ç–∏–µ –≤ —Ç—Ä–µ–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        if self.tray_icon is not None:
            return

        self.root.withdraw()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–∫–æ–Ω–∫—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏
        image = Image.new('RGB', (16, 16), 'black')
        self.tray_icon = pystray.Icon("time_tracker", image, "Time Tracker", self.tray_menu)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        def run_icon():
            try:
                self.tray_icon.run()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ç—Ä–µ—è: {e}")
            finally:
                self.tray_icon = None

        self.tray_thread = threading.Thread(target=run_icon, daemon=True)
        self.tray_thread.start()

    def restore_window(self, icon=None, item=None):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.tray_icon:
            try:
                self.tray_icon.stop()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç—Ä–µ—è: {e}")
            finally:
                self.tray_icon = None

        if not self.root.winfo_viewable():
            self.root.deiconify()
            self.root.after(100, lambda: self.root.focus_force())

    def exit_app(self, icon=None, item=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã—Ö–æ–¥"""
        self.restore_window()
        self.root.after(200, self.safe_exit)

    def update_task_time(self, task_id, seconds):
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏ –≤ –ë–î
        self.c.execute("UPDATE tasks SET time = time + ? WHERE id=?", (seconds, task_id))
        self.conn.commit()

    def task_exists(self, task_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID"""
        self.c.execute("SELECT 1 FROM tasks WHERE id=?", (task_id,))
        return bool(self.c.fetchone())

    def edit_task(self):
        selected = self.tasks_list.selection()
        if not selected:
            return

        task_id = self.tasks_list.item(selected[0])['values'][0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
        is_active = self.running_task and self.running_task['id'] == task_id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–∫—Ä–æ–º–µ –≤—Ä–µ–º–µ–Ω–∏)
        self.c.execute("SELECT regress, name, link FROM tasks WHERE id=?", (task_id,))
        regress, name, link = self.c.fetchone()

        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_win = tk.Toplevel(self.root)
        edit_win.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        edit_win.resizable(False, False)

        # –§—Ä–µ–π–º –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        fields_frame = ttk.Frame(edit_win, padding=10)
        fields_frame.pack()

        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        ttk.Label(fields_frame, text="–†–µ–≥—Ä–µ—Å—Å:").grid(row=0, column=0, sticky=tk.W, pady=5)
        regress_entry = ttk.Entry(fields_frame, width=40)
        regress_entry.grid(row=0, column=1, padx=5, pady=5)
        regress_entry.insert(0, regress)

        ttk.Label(fields_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").grid(row=1, column=0, sticky=tk.W, pady=5)
        name_entry = ttk.Entry(fields_frame, width=40)
        name_entry.grid(row=1, column=1, padx=5, pady=5)
        name_entry.insert(0, name)

        ttk.Label(fields_frame, text="–°—Å—ã–ª–∫–∞:").grid(row=2, column=0, sticky=tk.W, pady=5)
        link_entry = ttk.Entry(fields_frame, width=40)
        link_entry.grid(row=2, column=1, padx=5, pady=5)
        link_entry.insert(0, link)

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        buttons_frame = ttk.Frame(edit_win, padding=10)
        buttons_frame.pack()

        def save_changes():
            new_regress = regress_entry.get().strip()
            new_name = name_entry.get().strip()
            new_link = link_entry.get().strip()

            if not all([new_regress, new_name, new_link]):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
                return

            try:
                # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞, –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                if is_active:
                    elapsed = (datetime.now() - self.running_task['start_time']).total_seconds()
                    self.update_task_time(task_id, int(elapsed))
                    self.total_time += int(elapsed)

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                self.c.execute("""
                               UPDATE tasks
                               SET regress = ?,
                                   name    = ?,
                                   link    = ?
                               WHERE id = ?
                               """, (new_regress, new_name, new_link, task_id))
                self.conn.commit()

                # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞, –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
                if is_active:
                    self.running_task['start_time'] = datetime.now()

                self.update_tasks()
                edit_win.destroy()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É: {str(e)}")
                # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
                if is_active:
                    self.running_task['start_time'] = datetime.now() - timedelta(seconds=elapsed)

        ttk.Button(buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_changes).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="–û—Ç–º–µ–Ω–∞", command=edit_win.destroy).pack(side=tk.LEFT, padx=5)

    def setup_tracking_tab(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∑–∞–¥–∞—á"""
        tracking_frame = ttk.Frame(self.notebook)
        self.notebook.add(tracking_frame, text="–¢—Ä–µ–∫–∏–Ω–≥")

        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤–µ—Å—å –æ—Å–Ω–æ–≤–Ω–æ–π UI —Å—é–¥–∞
        main_frame = ttk.Frame(tracking_frame, padding=10)
        main_frame.pack(fill=tk.BOTH, expand=True)
        main_frame.grid_columnconfigure(1, weight=1)

        # –ü–æ–ª–µ –ª–æ–≥–∏–Ω–∞
        ttk.Label(main_frame, text="–õ–æ–≥–∏–Ω:").grid(row=0, column=0, sticky=tk.W, padx=(0, 10))
        self.login_entry = ttk.Entry(main_frame)
        self.login_entry.grid(row=0, column=1, padx=10, sticky=tk.EW)
        self.add_placeholder(self.login_entry, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω")

        # –§–æ—Ä–º–∞ –∑–∞–¥–∞—á–∏
        task_frame = ttk.LabelFrame(main_frame, text="–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", padding=10)
        task_frame.grid(row=1, column=0, columnspan=2, pady=5, sticky=tk.EW)
        task_frame.grid_columnconfigure(1, weight=1)

        ttk.Label(task_frame, text="–†–µ–≥—Ä–µ—Å—Å:").grid(row=0, column=0, sticky=tk.W)
        self.regress_entry = ttk.Entry(task_frame)
        self.regress_entry.grid(row=0, column=1, padx=10, sticky=tk.EW)
        self.add_placeholder(self.regress_entry, "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏")

        ttk.Label(task_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").grid(row=1, column=0, sticky=tk.W)
        self.name_entry = ttk.Entry(task_frame)
        self.name_entry.grid(row=1, column=1, padx=10, sticky=tk.EW)
        self.add_placeholder(self.name_entry, "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç-—Ä–∞–Ω–∞")

        ttk.Label(task_frame, text="–°—Å—ã–ª–∫–∞:").grid(row=2, column=0, sticky=tk.W)
        self.link_entry = ttk.Entry(task_frame)
        self.link_entry.grid(row=2, column=1, padx=10, sticky=tk.EW)
        self.add_placeholder(self.link_entry, "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç-—Ä–∞–Ω")

        self.extra_time = tk.BooleanVar()
        ttk.Checkbutton(task_frame, text="–î–æ–ø. –≤—Ä–µ–º—è", variable=self.extra_time).grid(row=3, columnspan=2, pady=5)

        add_btn = ttk.Button(task_frame, text="–î–æ–±–∞–≤–∏—Ç—å", command=self.add_task)
        add_btn.grid(row=4, columnspan=2, pady=5)

        # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        self.tasks_list = ttk.Treeview(main_frame, columns=('id', 'regress', 'name', 'status', 'time'), show='headings')
        self.tasks_list.heading('id', text='ID')
        self.tasks_list.heading('regress', text='–†–µ–≥—Ä–µ—Å—Å')
        self.tasks_list.heading('name', text='–ù–∞–∑–≤–∞–Ω–∏–µ')
        self.tasks_list.heading('status', text='–°—Ç–∞—Ç—É—Å')
        self.tasks_list.heading('time', text='–í—Ä–µ–º—è')
        self.tasks_list.column('status', width=100, anchor=tk.CENTER)
        self.tasks_list.grid(row=2, column=0, columnspan=2, pady=5, sticky=tk.NSEW)
        self.tasks_list.bind('<<TreeviewSelect>>', self.on_task_select)

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(main_frame)
        control_frame.grid(row=3, columnspan=2, pady=5)

        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã (–¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–¥–µ—Å—å)
        self.theme_btn = ttk.Button(control_frame, text="üåô",
                                    command=self.toggle_theme,
                                    width=3)
        self.theme_btn.pack(side=tk.LEFT, padx=10)

        delete_btn = ttk.Button(control_frame, text="–£–¥–∞–ª–∏—Ç—å", command=self.delete_task)
        delete_btn.pack(side=tk.LEFT, padx=10)

        self.total_time_label = ttk.Label(control_frame, text="–û–±—â–µ–µ –≤—Ä–µ–º—è: 00:00:00")
        self.total_time_label.pack(side=tk.LEFT, padx=10)

        self.pause_btn = ttk.Button(control_frame, text="–ü–∞—É–∑–∞", command=self.pause_all)
        self.pause_btn.pack(side=tk.LEFT, padx=10)

        self.resume_btn = ttk.Button(control_frame, text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", command=self.resume_all, state=tk.DISABLED)
        self.resume_btn.pack(side=tk.LEFT, padx=10)

        finish_btn = ttk.Button(control_frame, text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å", command=self.finish_day)
        finish_btn.pack(side=tk.LEFT, padx=10)

        self.edit_btn = ttk.Button(control_frame, text="–ò–∑–º–µ–Ω–∏—Ç—å", command=self.edit_task, state=tk.DISABLED)
        self.edit_btn.pack(side=tk.LEFT, padx=10)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        main_frame.grid_rowconfigure(2, weight=1)

    def setup_stats_tab(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.stats_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(self.stats_frame)
        control_frame.pack(fill=tk.X, padx=5, pady=5)

        # –õ–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫
        left_btn_frame = ttk.Frame(control_frame)
        left_btn_frame.pack(side=tk.LEFT)

        ttk.Button(left_btn_frame, text="–°—Ç–æ–ª–±—á–∞—Ç–∞—è",
                   command=lambda: self.switch_graph("bar")).pack(side=tk.LEFT, padx=5)
        ttk.Button(left_btn_frame, text="–ö—Ä—É–≥–æ–≤–∞—è",
                   command=lambda: self.switch_graph("pie")).pack(side=tk.LEFT, padx=5)

        # –ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å" —Å–ø—Ä–∞–≤–∞
        ttk.Button(control_frame, text="–û–±–Ω–æ–≤–∏—Ç—å",
                   command=self.update_graph).pack(side=tk.RIGHT, padx=5)

        # –û–±–ª–∞—Å—Ç—å –≥—Ä–∞—Ñ–∏–∫–∞
        self.graph_frame = ttk.Frame(self.stats_frame)
        self.graph_frame.pack(fill=tk.BOTH, expand=True)

    def switch_graph(self, graph_type):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞"""
        self.current_graph_type = graph_type
        self.update_graph()

    def update_graph(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã"""
        for widget in self.graph_frame.winfo_children():
            widget.destroy()

        try:
            # –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–º–Ω–æ–π/—Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
            if self.dark_mode:
                bg_color = "#1E1E1E"
                text_color = "#E0E0E0"
                grid_color = "#3A3A3A"
                bar_color = "#4A6987"
            else:
                bg_color = "#FFFFFF"
                text_color = "#000000"
                grid_color = "#D0D0D0"
                bar_color = "#0078D7"

            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É
            fig = Figure(figsize=(6, 4), dpi=100,
                         facecolor=bg_color)
            ax = fig.add_subplot(111,
                                 facecolor=bg_color)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.c.execute("SELECT name, SUM(time) FROM tasks GROUP BY name")
            data = self.c.fetchall()

            if not data:
                ax.text(0.5, 0.5, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                        ha='center', va='center',
                        color=text_color)
            else:
                names = [x[0] for x in data]
                times = [x[1] / 3600 for x in data]  # –≤ —á–∞—Å–∞—Ö

                if self.current_graph_type == "bar":
                    bars = ax.bar(names, times, color=bar_color)
                    ax.set_ylabel('–ß–∞—Å—ã', color=text_color)
                    ax.set_title('–í—Ä–µ–º—è –ø–æ –∑–∞–¥–∞—á–∞–º', color=text_color)

                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ –∏ –æ—Å–µ–π
                    ax.grid(color=grid_color, linestyle='--', alpha=0.5)
                    ax.tick_params(axis='x', colors=text_color, rotation=45)
                    ax.tick_params(axis='y', colors=text_color)

                    # –ü–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π
                    for bar in bars:
                        height = bar.get_height()
                        ax.text(bar.get_x() + bar.get_width() / 2., height,
                                f'{height:.1f}',
                                ha='center', va='bottom',
                                color=text_color)
                else:
                    # –î–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏—è—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
                    colors = ['#4A6987', '#5D8AA8', '#7EB6FF', '#003366', '#1E1E1E']
                    ax.pie(times, labels=names, autopct='%1.1f%%',
                           colors=colors[:len(times)],
                           textprops={'color': text_color})
                    ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏', color=text_color)

            # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            canvas = FigureCanvasTkAgg(fig, master=self.graph_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

        except Exception as e:
            ttk.Label(self.graph_frame, text=f"–û—à–∏–±–∫–∞: {str(e)}",
                      foreground="red").pack()

    def update_graph_theme(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        if self.dark_mode:
            plt.style.use('dark_background')
        else:
            plt.style.use('default')
        self.update_graph()

    def safe_exit(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        try:
            plt.close('all')  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∏–≥—É—Ä—ã matplotlib
            if hasattr(self, 'conn'):
                self.conn.close()
            if hasattr(self, 'tray_icon'):
                self.tray_icon.stop()
            self.root.quit()  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ mainloop
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
        finally:
            sys.exit(0)

    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π"""
        self.dark_mode = not self.dark_mode
        self.theme_btn.config(text="‚òÄÔ∏è" if self.dark_mode else "üåô")  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
        self.apply_theme()
        self.save_theme()

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã"""
        if self.dark_mode:
            # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
            bg_color = "#1E1E1E"  # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω
            fg_color = "#E0E0E0"  # –¢–µ–∫—Å—Ç
            border_color = "#2D2D2D"  # –¢—ë–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã (–ø–æ—á—Ç–∏ —Å–ª–∏–≤–∞—é—Ç—Å—è —Å —Ñ–æ–Ω–æ–º)
            separator_color = "#333333"  # –¶–≤–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π

            # –î–æ–ø. —Ü–≤–µ—Ç–∞
            entry_bg = "#252525"
            button_bg = "#333333"
        else:
            # –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ)
            bg_color = "#F5F5F5"
            fg_color = "#000000"
            border_color = "#CCCCCC"
            separator_color = "#E0E0E0"

            # –î–æ–ø. —Ü–≤–µ—Ç–∞
            entry_bg = "#FFFFFF"
            button_bg = "#E0E0E0"

        style = ttk.Style()
        style.theme_use('clam')

        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        style.configure('.',
                        background=bg_color,
                        foreground=fg_color,
                        bordercolor=border_color,
                        darkcolor=border_color,
                        lightcolor=border_color)

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        style.configure("TSeparator",
                        background=separator_color)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Notebook (–≤–∫–ª–∞–¥–æ–∫)
        style.configure("TNotebook",
                        background=bg_color,
                        bordercolor=border_color)
        style.configure("TNotebook.Tab",
                        background=bg_color,
                        foreground=fg_color,
                        bordercolor=border_color,
                        padding=[10, 5])

        # Treeview (—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á)
        style.configure("Treeview",
                        background=entry_bg,
                        foreground=fg_color,
                        fieldbackground=entry_bg,
                        bordercolor=border_color)

        # –ö–Ω–æ–ø–∫–∏ –∏ –ø–æ–ª—è –≤–≤–æ–¥–∞
        style.configure("TButton",
                        background=button_bg,
                        foreground=fg_color)
        style.configure("TEntry",
                        fieldbackground=entry_bg,
                        foreground=fg_color)

        # LabelFrame
        style.configure("TLabelframe",
                        background=bg_color,
                        bordercolor=border_color)

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        self.root.config(bg=bg_color)
        self.update_graph_theme()

    def save_theme(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –≤ —Ñ–∞–π–ª"""
        with open('theme.cfg', 'w') as f:
            f.write('dark' if self.dark_mode else 'light')

    def load_theme(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open('theme.cfg', 'r') as f:
                self.dark_mode = f.read() == 'dark'
            self.apply_theme()
        except:
            self.dark_mode = False

if __name__ == "__main__":
    root = tk.Tk()
    app = TimeTracker(root)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
    def on_close():
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–°–≤–µ—Ä–Ω—É—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ —Ç—Ä–µ–π?"):
            app.hide_to_tray()
        else:
            app.safe_exit()

    root.protocol('WM_DELETE_WINDOW', on_close)

    try:
        root.mainloop()
    except KeyboardInterrupt:
        app.safe_exit()
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        app.safe_exit()